// @file build.gradle
// minecoprocessors mod gradle build file (mc1.15.4/5)
import net.minecraftforge.gradle.common.task.SignJar
buildscript {
  repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
//-----------------------------------------------------------------------------
version = "${version_mod}"
group = "net.torocraft.minecoprocessors"
archivesBaseName = "minecoprocessors-${version_minecraft}"

minecraft {
  mappings channel: 'snapshot', version: "${version_fml_mappings}"
  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
  runs {
    client {
      workingDirectory project.file('run')
      property 'forge.logging.markers', '' // SCAN,REGISTRIES,REGISTRYDUMP
      property 'forge.logging.console.level', 'info'
      mods {
        minecoprocessors {
          source sourceSets.main
        }
      }
    }
    server {
      workingDirectory project.file('run')
      property 'forge.logging.markers', '' // SCAN,REGISTRIES,REGISTRYDUMP
      property 'forge.logging.console.level', 'info'
      mods {
        minecoprocessors {
          source sourceSets.main
        }
      }
    }
    data {
      workingDirectory project.file('run')
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
      property 'forge.logging.console.level', 'debug'
      args '--mod', 'minecoprocessors', '--all', '--output', file('src/generated/resources/')
      mods {
        minecoprocessors {
          source sourceSets.main
        }
      }
    }
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${version_forge_minecraft}"
  testCompile 'junit:junit:4.12'
  testCompile 'org.jmockit:jmockit:1.34'
}

processResources {
  outputs.upToDateWhen { false }
  doLast { file("${sourceSets.main.output.resourcesDir}/.gitversion-minecoprocessors").text = 'git log "-1" "--format=%h"'.execute().in.text.trim() }
}

jar {
  manifest {
    attributes([
      "Specification-Title": "minecoprocessors",
      "Specification-Vendor": "torocraft",
      "Specification-Version": "1",
      "Implementation-Title": project.name,
      "Implementation-Version": "${version_mod}",
      "Implementation-Vendor" :"torocraft",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) { type 'jar'; builtBy 'reobfJar'; }

task signJar(type: SignJar, dependsOn: jar) {
  onlyIf { project.hasProperty("keystore_file") }
  if(project.hasProperty("keystore_file")) {
    keyStore = project.getProperty("keystore_file")
    alias = project.getProperty("keystore_alias")
    storePass = project.getProperty("keystore_pass")
    keyPass = project.getProperty("keystore_keypass")
    inputFile = jar.archivePath
    outputFile = jar.archivePath
  } else {
    logger.warn("[WARNING] Signing skipped.")
  }
}
build.dependsOn signJar

publishing {
  publications { mavenJava(MavenPublication) { artifact reobfArtifact } }
  repositories { maven { url "file:///${project.projectDir}/mcmodsrepo" } }
}
