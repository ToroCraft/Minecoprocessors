Redstone Processor Manual
Minecoprocessors
§r
§r
§r   Minecoprocessors
§r
§r        Redstone
§r       Processor
§r        Manual
§r
§r
§r
§oVisit the Wiki§r §1https://github.com/ToroCraft/Minecoprocessors/wiki§r
~~~
§nIndex§r

The first pages of this manual are dense "cheat sheets". A more detailed introduction starts at page §l10§r.

Some examples are attached as appendix.



~~~
§nI/O Registers§r

§1pf, pb, pl, pr§r: I/Os

§1ports§r: I/O config
§1adc§r: ADC config
§1idr§r: Input data reg
§1odr§r: Output data reg

Bit order for §1ports§r, §1adc§r, §1idr§r, §1odr§r: front (0001b), back (0010b), left (0100b), right (1000b)§r.
~~~
§nBasic Instructions§r

§1MOV a, b§r Move/assign
§1NOP§r No Operation
§1CLC§r Clear Carry
§1SEC§r Set Carry
§1CLZ§r Clear Zero
§1SEZ§r Set Zero

§1PUSH a§r Push to Stack
§1POP a§r Pop from Stack

§1WFE§r Wait For Event
§1HLT§r Halt Processor
~~~
§nArithmetic Instructions§r

§1ADD a, b§r Add
§1SUB a, b§r Subtract
§1MUL a§r Multiply
§1DIV a§r Divide
§1INC a§r Increment by 1
§1DEC a§r Decrement by 1





§o(Results stored in §1a§r§o).§r
~~~
§nLogical Instructions§r

§1AND a, b§r Bitwise AND
§1OR a, b§r Bitwise OR
§1XOR a, b§r Bitwise XOR
§1NOT a§r Bitwise NOT







§o(Results stored in §1a§r§o).§r
~~~
§nShift Instructions§r

§1SHL a§r Shift Left
§1SHR a§r Shift Right
§1SAR a§r Arithmetic Right
§1SAL a§r Arithmetic Left
§1ROR a§r Rotate Right
§1ROL a§r Rotate Right





§o(Results stored in §1a§r§o).§r
~~~
§nFlow Control Instr.§r

§1CMP a, b§r Compare
§1JMP label§r Jump
§1JZ label§r Jump if Zero
§1JNZ label§r not Zero
§1JC label§r if Carry
§1JNC label§r if no Carry
§1DJNZ a, label§r Dec and Jump if not zero
§1CALL label§r Call
§1RET§r Return
~~~
§nFlags§r

§1Z§r Zero Flag
§1C§r Carry Flag
§1F§r Fault Flag
§1S§r Sleep Flag






~~~



     §o§lIntroduction§r

~~~
§nSyntax§r

In assembly language we do one operation per line. Each line starts with an instruction, followed by arguments, e.g.:

 §1MOV a, 10§r

assigns 10 to the register §1a§r ("§1a = 10§r").
~~~
Instructions which calculate something normally store the result back in the first argument, hence,

 §1MOV a, 12§r
 §1MOV b, 10§r
 §1SUB a, b§r

will result in register §1a§r containing §12§r as present value.

~~~
Comments start with a semicolon:

 §1; This is a comment§r

Labels allow to name program addresses. They are used for conditions, loops, or functions:

§4start:§r
 §1JMP§r §4start§r
~~~
Numbers can be hex, decimal, octal, as well as binary. A byte with all bits set (§11§r) can be written as:

Hexadecimal: §10xff§r
Decimal: §1-1§r
Octal: §10o377§r
Binary: §111111111b§r

The decimal value above is equal to §1-1§r because the byte is ...
~~~
interpreted as signed value. That means the highest bit §110000000b§r adds §1-128§r to all other bits, which add §11§r, §12§r, §14§r, §18§r, §116§r, §132§r, and §164§r to the value.

In most cases, binary or hexadecimal representations are best, as we are often dealing with the bits in registers.
~~~
§nCore Registers§r

The CPU has four one byte registers §1a, b, c,§r and §1d§r to store values and calculate.

These "variables" do not change any of the signals outside the CPU - they are only internal.
~~~
§nPorts and Port Config§r

The CPU interacts with the world around via special registers. These are mapped to the four sides of the device, and we need to tell the CPU if we like to read signals from a side, or want to output redstone power there.

Additionally, we can
~~~
specify for each I/O if we are interested in the numeric "strength" value of the signal, or only the on/off data.
§oAlso known as §1analog§r and §1digital§r mode.§r

Lastly, ports can also be used to reset the controller by leaving a side unconfigured or "unconfiguring" it explicitly.

~~~
Signals are accessible primarily through the registers §1pf pb pl pr§r:

§80001b | §1pf§r : front
§80010b | §1pb§r : back
§80100b | §1pl§r  : left
§81000b | §1pr§r : right

Gray annotated are the binary bit values to configure the I/Os in the §1ports§r and §1adc§r registers.
~~~
The first instruction in a listing is normally to write the register §1ports§r, where cleared bit configure outputs and set bits inputs. E.g.

  §1MOV ports, 1010b§r

defines §1pf§r and §1pl§r as outputs, §1pb§r and §1pr§r as inputs. To use an I/O for reset, set its bit
~~~
in the low and high nibble:

  §1MOV ports, 0x33§r

configures §1pf§r and §1pb§r as reset, §1pl§r and §1pr§r as output.

By default I/Os are in digital mode. Hence, we read the value §10x00§r if an input signal is §40§r, and §10x01§r for any
~~~
strength from §41§r to §415§r.
Reversely, writing §10§r to an output will result in an unpowered side, while any other value will yield strength §415§r.

  §1MOV pf, 0§r
  §1MOV pf, 1b§r
  §1MOV pf, 0x0e§r
  §1MOV pf, -3§r

Signal §40§r in the first case, others §415§r.
~~~
Multiple digital I/Os can be read/written simultaneously using Input/Output Data Registers §1idr§r and §1odr§r:

  §1MOV a, idr§r
  §1MOV odr, 0110b§r

The §1idr§r reads set bits of output ports as 1. These registers can be useful to latch ports in one tick, and

~~~
process the data afterwards.
Analog configuration is done like the port direction setting, but using register §1adc§r:

  §1MOV ports, 0010b§r
  §1MOV adc  , 1110b§r

§1pf§r is digital output, §1pb§r analog input (ADC), §1pr§r and §1pl§r analog outputs
(DACs). All ADCs will
~~~
read the exact input strength between §40§r (§10x0§r) and §415§r (§10xf§r).

DACs will output the register values limited from §10§r to §115§r.

  §1MOV ports, 0000b§r
  §1MOV adc  , 0011b§r
  §1MOV pf    , 10§r
  §1MOV pb    , -1§r

Front: §410§r, back: §40§r, as
~~~
the numeric value is less than zero, and therefore limited to 0.

  §1MOV pf, 20§r

... is clamped to 15 without wrap-over, too.
~~~




 §o§lExample Programs§r


~~~
§nSimple Repeater§r



 §1MOV ports, 0010b§r
start:
 §1MOV pf, pb§r
 §1JMP§r start
~~~
§n3 Input AND Gate§r



 §1MOV ports, 1110b§r
start:
 §1MOV a, pb§r
 §1AND a, pl§r
 §1AND a, pr§r
 §1MOV pf, a§r
§1jmp§r start
~~~
§nEnabled-clock§r
§nPulse Multiplier§r


 §1MOV ports, 0010b§r
start:
 §1CMP pb, 0§r
 §1JZ§r off
 §1NOT pf§r
 §1JMP§r start
off:
 §1MOV pf, 0§r
 §1JMP§r start
